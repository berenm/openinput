/**
@defgroup Public Public API
@brief The public programming interface for the OpenInput library

OpenInput provides a cross-platform, portable API for handling
input devices such as mice, keyboards and joysticks. This is the
public API, which is exposed applications which use the library

@{
 */
/**
@}
 */

/**
@defgroup PTypes Types, structures and constants
@brief Type definitions and constants
@ingroup Public

Structures, global constants and type definitions
for library internals. This includes errorcodes,
flags, masks, event structures and much more.

@{
 */
/**
@}
 */

/**
@defgroup PMain Library interface
@brief OpenInput library initialization and friends
@ingroup Public

Interface to initialize or close the OpenInput library

@{
 */
/**
@}
 */

/**
@defgroup PDevice Device driver interface
@brief Device driver interface
@ingroup Public

Obtain information about the present input devices

@{
 */
/**
@}
 */

/**
@defgroup PKeyboard Keyboard state manager
@brief Generic keyboard handling and state managment
@ingroup Public

Information about the state of present keyboard. That is,
are buttons up or down

@{
 */
/**
@}
 */

/**
@defgroup PMouse Mouse state manager
@brief Mouse state managment
@ingroup Public

Information about the state of present mice. That is,
which buttons are up or down, what is the absolute position and
how far did the mouse travel (relative position)

@{
 */
/**
@}
 */

/**
@defgroup PEvent Event handling
@brief Event handling interface
@ingroup Public

The event functions lets you read a multitude of events generated by
input devices. This is probably what you want to do in your
application. You can wait or poll for events, filter them or inject
your own events into the event queue

@{
 */
/**
@}
 */

/**
@defgroup PAppstate Application state
@brief Window state managment
@ingroup Public

Get the size of the current window, grab mouse and keyboard
focus and hide or show the mouse cursor

@{
 */
/**
@}
 */

/**
@defgroup PAction Action mapper
@brief Action mapper interface
@ingroup Public

Interface for translating specific events like keypresses, mouse
buttons etc. into abstract events. This lets you catch action events
such that you can listen for "jump" or "fire" instead of "space" or
"pagedown"

@{
 */
/**
@}
 */

/**
@defgroup PEventStructs Event structures
@brief Event structures
@ingroup PTypes

Depending on which device that generates an event, different
event structures are used. All events contain a "type" field,
but are otherwise different from each other.

@{
 */
/**
@}
 */
